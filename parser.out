

Unused terminals:


Grammar

Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> empty
Rule 4     statement -> call
Rule 5     statement -> definition
Rule 6     statement -> typerenderer
Rule 7     statement -> import
Rule 8     statement -> nop
Rule 9     import -> IMPORT STRING EOL
Rule 10    definition -> DEF SYMBOL paramdefs : callsorblock
Rule 11    typerenderer -> @ SYMBOL paramdefs : callsorblock
Rule 12    block -> INDENT calls DEDENT
Rule 13    calls -> calls call
Rule 14    calls -> empty
Rule 15    call -> fullcall
Rule 16    call -> exprs EOL
Rule 17    exprs -> exprs expr
Rule 18    exprs -> expr
Rule 19    expr -> string
Rule 20    expr -> implicit
Rule 21    expr -> cycle
Rule 22    expr -> simplecall
Rule 23    expr -> pycode
Rule 24    string -> STRING
Rule 25    implicit -> IMPLICIT
Rule 26    cycle -> [ exprs ] callparams
Rule 27    simplecall -> SYMBOL callparams
Rule 28    pycode -> PYCODE
Rule 29    fullcall -> SYMBOL callparams : callsorblock
Rule 30    callsorblock -> EOL block
Rule 31    callsorblock -> exprs EOL
Rule 32    paramdefs -> ( paramnames )
Rule 33    paramdefs -> ( )
Rule 34    paramnames -> paramnames , paramname
Rule 35    paramnames -> paramname
Rule 36    paramname -> SYMBOL = STRING
Rule 37    paramname -> SYMBOL
Rule 38    callparams -> ( paramvalues )
Rule 39    callparams -> empty
Rule 40    paramvalues -> paramvalues , paramvalue
Rule 41    paramvalues -> paramvalue
Rule 42    paramvalue -> SYMBOL = paramexpr
Rule 43    paramvalue -> paramexpr
Rule 44    paramexpr -> exprs
Rule 45    paramexpr -> group
Rule 46    group -> ( paramvalues )
Rule 47    empty -> <empty>
Rule 48    nop -> EOL

Terminals, with rules where they appear

(                    : 32 33 38 46
)                    : 32 33 38 46
,                    : 34 40
:                    : 10 11 29
=                    : 36 42
@                    : 11
DEDENT               : 12
DEF                  : 10
EOL                  : 9 16 30 31 48
IMPLICIT             : 25
IMPORT               : 9
INDENT               : 12
PYCODE               : 28
STRING               : 9 24 36
SYMBOL               : 10 11 27 29 36 37 42
[                    : 26
]                    : 26
error                : 

Nonterminals, with rules where they appear

block                : 30
call                 : 4 13
callparams           : 26 27 29
calls                : 12 13
callsorblock         : 10 11 29
cycle                : 21
definition           : 5
empty                : 3 14 39
expr                 : 17 18
exprs                : 16 17 26 31 44
fullcall             : 15
group                : 45
implicit             : 20
import               : 7
nop                  : 8
paramdefs            : 10 11
paramexpr            : 42 43
paramname            : 34 35
paramnames           : 32 34
paramvalue           : 40 41
paramvalues          : 38 40 46
program              : 0
pycode               : 23
simplecall           : 22
statement            : 2
statements           : 1 2
string               : 19
typerenderer         : 6


Parsing method: LALR


state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . empty
    (47) empty -> .

    DEF             reduce using rule 47 (empty -> .)
    @               reduce using rule 47 (empty -> .)
    IMPORT          reduce using rule 47 (empty -> .)
    EOL             reduce using rule 47 (empty -> .)
    SYMBOL          reduce using rule 47 (empty -> .)
    STRING          reduce using rule 47 (empty -> .)
    IMPLICIT        reduce using rule 47 (empty -> .)
    [               reduce using rule 47 (empty -> .)
    PYCODE          reduce using rule 47 (empty -> .)
    $end            reduce using rule 47 (empty -> .)


    program                        shift and go to state 1
    statements                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .




state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . call
    (5) statement -> . definition
    (6) statement -> . typerenderer
    (7) statement -> . import
    (8) statement -> . nop
    (15) call -> . fullcall
    (16) call -> . exprs EOL
    (10) definition -> . DEF SYMBOL paramdefs : callsorblock
    (11) typerenderer -> . @ SYMBOL paramdefs : callsorblock
    (9) import -> . IMPORT STRING EOL
    (48) nop -> . EOL
    (29) fullcall -> . SYMBOL callparams : callsorblock
    (17) exprs -> . exprs expr
    (18) exprs -> . expr
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    $end            reduce using rule 1 (program -> statements .)
    DEF             shift and go to state 8
    @               shift and go to state 14
    IMPORT          shift and go to state 13
    EOL             shift and go to state 5
    SYMBOL          shift and go to state 4
    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    definition                     shift and go to state 23
    string                         shift and go to state 9
    typerenderer                   shift and go to state 26
    fullcall                       shift and go to state 16
    expr                           shift and go to state 24
    pycode                         shift and go to state 6
    exprs                          shift and go to state 25
    call                           shift and go to state 11
    statement                      shift and go to state 12
    import                         shift and go to state 7
    nop                            shift and go to state 19
    implicit                       shift and go to state 20
    cycle                          shift and go to state 21

state 3

    (3) statements -> empty .

    DEF             reduce using rule 3 (statements -> empty .)
    @               reduce using rule 3 (statements -> empty .)
    IMPORT          reduce using rule 3 (statements -> empty .)
    EOL             reduce using rule 3 (statements -> empty .)
    SYMBOL          reduce using rule 3 (statements -> empty .)
    STRING          reduce using rule 3 (statements -> empty .)
    IMPLICIT        reduce using rule 3 (statements -> empty .)
    [               reduce using rule 3 (statements -> empty .)
    PYCODE          reduce using rule 3 (statements -> empty .)
    $end            reduce using rule 3 (statements -> empty .)



state 4

    (29) fullcall -> SYMBOL . callparams : callsorblock
    (27) simplecall -> SYMBOL . callparams
    (38) callparams -> . ( paramvalues )
    (39) callparams -> . empty
    (47) empty -> .

    (               shift and go to state 28
    :               reduce using rule 47 (empty -> .)
    EOL             reduce using rule 47 (empty -> .)
    STRING          reduce using rule 47 (empty -> .)
    IMPLICIT        reduce using rule 47 (empty -> .)
    [               reduce using rule 47 (empty -> .)
    SYMBOL          reduce using rule 47 (empty -> .)
    PYCODE          reduce using rule 47 (empty -> .)


    callparams                     shift and go to state 27
    empty                          shift and go to state 29

state 5

    (48) nop -> EOL .

    DEF             reduce using rule 48 (nop -> EOL .)
    @               reduce using rule 48 (nop -> EOL .)
    IMPORT          reduce using rule 48 (nop -> EOL .)
    EOL             reduce using rule 48 (nop -> EOL .)
    SYMBOL          reduce using rule 48 (nop -> EOL .)
    STRING          reduce using rule 48 (nop -> EOL .)
    IMPLICIT        reduce using rule 48 (nop -> EOL .)
    [               reduce using rule 48 (nop -> EOL .)
    PYCODE          reduce using rule 48 (nop -> EOL .)
    $end            reduce using rule 48 (nop -> EOL .)



state 6

    (23) expr -> pycode .

    EOL             reduce using rule 23 (expr -> pycode .)
    STRING          reduce using rule 23 (expr -> pycode .)
    IMPLICIT        reduce using rule 23 (expr -> pycode .)
    [               reduce using rule 23 (expr -> pycode .)
    SYMBOL          reduce using rule 23 (expr -> pycode .)
    PYCODE          reduce using rule 23 (expr -> pycode .)
    )               reduce using rule 23 (expr -> pycode .)
    ,               reduce using rule 23 (expr -> pycode .)
    ]               reduce using rule 23 (expr -> pycode .)



state 7

    (7) statement -> import .

    DEF             reduce using rule 7 (statement -> import .)
    @               reduce using rule 7 (statement -> import .)
    IMPORT          reduce using rule 7 (statement -> import .)
    EOL             reduce using rule 7 (statement -> import .)
    SYMBOL          reduce using rule 7 (statement -> import .)
    STRING          reduce using rule 7 (statement -> import .)
    IMPLICIT        reduce using rule 7 (statement -> import .)
    [               reduce using rule 7 (statement -> import .)
    PYCODE          reduce using rule 7 (statement -> import .)
    $end            reduce using rule 7 (statement -> import .)



state 8

    (10) definition -> DEF . SYMBOL paramdefs : callsorblock

    SYMBOL          shift and go to state 30



state 9

    (19) expr -> string .

    EOL             reduce using rule 19 (expr -> string .)
    STRING          reduce using rule 19 (expr -> string .)
    IMPLICIT        reduce using rule 19 (expr -> string .)
    [               reduce using rule 19 (expr -> string .)
    SYMBOL          reduce using rule 19 (expr -> string .)
    PYCODE          reduce using rule 19 (expr -> string .)
    )               reduce using rule 19 (expr -> string .)
    ,               reduce using rule 19 (expr -> string .)
    ]               reduce using rule 19 (expr -> string .)



state 10

    (25) implicit -> IMPLICIT .

    STRING          reduce using rule 25 (implicit -> IMPLICIT .)
    IMPLICIT        reduce using rule 25 (implicit -> IMPLICIT .)
    [               reduce using rule 25 (implicit -> IMPLICIT .)
    SYMBOL          reduce using rule 25 (implicit -> IMPLICIT .)
    PYCODE          reduce using rule 25 (implicit -> IMPLICIT .)
    )               reduce using rule 25 (implicit -> IMPLICIT .)
    ,               reduce using rule 25 (implicit -> IMPLICIT .)
    EOL             reduce using rule 25 (implicit -> IMPLICIT .)
    ]               reduce using rule 25 (implicit -> IMPLICIT .)



state 11

    (4) statement -> call .

    DEF             reduce using rule 4 (statement -> call .)
    @               reduce using rule 4 (statement -> call .)
    IMPORT          reduce using rule 4 (statement -> call .)
    EOL             reduce using rule 4 (statement -> call .)
    SYMBOL          reduce using rule 4 (statement -> call .)
    STRING          reduce using rule 4 (statement -> call .)
    IMPLICIT        reduce using rule 4 (statement -> call .)
    [               reduce using rule 4 (statement -> call .)
    PYCODE          reduce using rule 4 (statement -> call .)
    $end            reduce using rule 4 (statement -> call .)



state 12

    (2) statements -> statements statement .

    DEF             reduce using rule 2 (statements -> statements statement .)
    @               reduce using rule 2 (statements -> statements statement .)
    IMPORT          reduce using rule 2 (statements -> statements statement .)
    EOL             reduce using rule 2 (statements -> statements statement .)
    SYMBOL          reduce using rule 2 (statements -> statements statement .)
    STRING          reduce using rule 2 (statements -> statements statement .)
    IMPLICIT        reduce using rule 2 (statements -> statements statement .)
    [               reduce using rule 2 (statements -> statements statement .)
    PYCODE          reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)



state 13

    (9) import -> IMPORT . STRING EOL

    STRING          shift and go to state 31



state 14

    (11) typerenderer -> @ . SYMBOL paramdefs : callsorblock

    SYMBOL          shift and go to state 32



state 15

    (24) string -> STRING .

    EOL             reduce using rule 24 (string -> STRING .)
    STRING          reduce using rule 24 (string -> STRING .)
    IMPLICIT        reduce using rule 24 (string -> STRING .)
    [               reduce using rule 24 (string -> STRING .)
    SYMBOL          reduce using rule 24 (string -> STRING .)
    PYCODE          reduce using rule 24 (string -> STRING .)
    ]               reduce using rule 24 (string -> STRING .)
    )               reduce using rule 24 (string -> STRING .)
    ,               reduce using rule 24 (string -> STRING .)



state 16

    (15) call -> fullcall .

    DEF             reduce using rule 15 (call -> fullcall .)
    @               reduce using rule 15 (call -> fullcall .)
    IMPORT          reduce using rule 15 (call -> fullcall .)
    EOL             reduce using rule 15 (call -> fullcall .)
    SYMBOL          reduce using rule 15 (call -> fullcall .)
    STRING          reduce using rule 15 (call -> fullcall .)
    IMPLICIT        reduce using rule 15 (call -> fullcall .)
    [               reduce using rule 15 (call -> fullcall .)
    PYCODE          reduce using rule 15 (call -> fullcall .)
    $end            reduce using rule 15 (call -> fullcall .)
    DEDENT          reduce using rule 15 (call -> fullcall .)



state 17

    (28) pycode -> PYCODE .

    EOL             reduce using rule 28 (pycode -> PYCODE .)
    STRING          reduce using rule 28 (pycode -> PYCODE .)
    IMPLICIT        reduce using rule 28 (pycode -> PYCODE .)
    [               reduce using rule 28 (pycode -> PYCODE .)
    SYMBOL          reduce using rule 28 (pycode -> PYCODE .)
    PYCODE          reduce using rule 28 (pycode -> PYCODE .)
    )               reduce using rule 28 (pycode -> PYCODE .)
    ,               reduce using rule 28 (pycode -> PYCODE .)
    ]               reduce using rule 28 (pycode -> PYCODE .)



state 18

    (26) cycle -> [ . exprs ] callparams
    (17) exprs -> . exprs expr
    (18) exprs -> . expr
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    SYMBOL          shift and go to state 33
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    string                         shift and go to state 9
    expr                           shift and go to state 24
    pycode                         shift and go to state 6
    exprs                          shift and go to state 34
    implicit                       shift and go to state 20
    cycle                          shift and go to state 21

state 19

    (8) statement -> nop .

    DEF             reduce using rule 8 (statement -> nop .)
    @               reduce using rule 8 (statement -> nop .)
    IMPORT          reduce using rule 8 (statement -> nop .)
    EOL             reduce using rule 8 (statement -> nop .)
    SYMBOL          reduce using rule 8 (statement -> nop .)
    STRING          reduce using rule 8 (statement -> nop .)
    IMPLICIT        reduce using rule 8 (statement -> nop .)
    [               reduce using rule 8 (statement -> nop .)
    PYCODE          reduce using rule 8 (statement -> nop .)
    $end            reduce using rule 8 (statement -> nop .)



state 20

    (20) expr -> implicit .

    EOL             reduce using rule 20 (expr -> implicit .)
    STRING          reduce using rule 20 (expr -> implicit .)
    IMPLICIT        reduce using rule 20 (expr -> implicit .)
    [               reduce using rule 20 (expr -> implicit .)
    SYMBOL          reduce using rule 20 (expr -> implicit .)
    PYCODE          reduce using rule 20 (expr -> implicit .)
    )               reduce using rule 20 (expr -> implicit .)
    ,               reduce using rule 20 (expr -> implicit .)
    ]               reduce using rule 20 (expr -> implicit .)



state 21

    (21) expr -> cycle .

    EOL             reduce using rule 21 (expr -> cycle .)
    STRING          reduce using rule 21 (expr -> cycle .)
    IMPLICIT        reduce using rule 21 (expr -> cycle .)
    [               reduce using rule 21 (expr -> cycle .)
    SYMBOL          reduce using rule 21 (expr -> cycle .)
    PYCODE          reduce using rule 21 (expr -> cycle .)
    )               reduce using rule 21 (expr -> cycle .)
    ,               reduce using rule 21 (expr -> cycle .)
    ]               reduce using rule 21 (expr -> cycle .)



state 22

    (22) expr -> simplecall .

    EOL             reduce using rule 22 (expr -> simplecall .)
    STRING          reduce using rule 22 (expr -> simplecall .)
    IMPLICIT        reduce using rule 22 (expr -> simplecall .)
    [               reduce using rule 22 (expr -> simplecall .)
    SYMBOL          reduce using rule 22 (expr -> simplecall .)
    PYCODE          reduce using rule 22 (expr -> simplecall .)
    )               reduce using rule 22 (expr -> simplecall .)
    ,               reduce using rule 22 (expr -> simplecall .)
    ]               reduce using rule 22 (expr -> simplecall .)



state 23

    (5) statement -> definition .

    DEF             reduce using rule 5 (statement -> definition .)
    @               reduce using rule 5 (statement -> definition .)
    IMPORT          reduce using rule 5 (statement -> definition .)
    EOL             reduce using rule 5 (statement -> definition .)
    SYMBOL          reduce using rule 5 (statement -> definition .)
    STRING          reduce using rule 5 (statement -> definition .)
    IMPLICIT        reduce using rule 5 (statement -> definition .)
    [               reduce using rule 5 (statement -> definition .)
    PYCODE          reduce using rule 5 (statement -> definition .)
    $end            reduce using rule 5 (statement -> definition .)



state 24

    (18) exprs -> expr .

    STRING          reduce using rule 18 (exprs -> expr .)
    IMPLICIT        reduce using rule 18 (exprs -> expr .)
    [               reduce using rule 18 (exprs -> expr .)
    SYMBOL          reduce using rule 18 (exprs -> expr .)
    PYCODE          reduce using rule 18 (exprs -> expr .)
    )               reduce using rule 18 (exprs -> expr .)
    ,               reduce using rule 18 (exprs -> expr .)
    EOL             reduce using rule 18 (exprs -> expr .)
    ]               reduce using rule 18 (exprs -> expr .)



state 25

    (16) call -> exprs . EOL
    (17) exprs -> exprs . expr
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    EOL             shift and go to state 36
    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    SYMBOL          shift and go to state 33
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    string                         shift and go to state 9
    expr                           shift and go to state 35
    pycode                         shift and go to state 6
    implicit                       shift and go to state 20
    cycle                          shift and go to state 21

state 26

    (6) statement -> typerenderer .

    DEF             reduce using rule 6 (statement -> typerenderer .)
    @               reduce using rule 6 (statement -> typerenderer .)
    IMPORT          reduce using rule 6 (statement -> typerenderer .)
    EOL             reduce using rule 6 (statement -> typerenderer .)
    SYMBOL          reduce using rule 6 (statement -> typerenderer .)
    STRING          reduce using rule 6 (statement -> typerenderer .)
    IMPLICIT        reduce using rule 6 (statement -> typerenderer .)
    [               reduce using rule 6 (statement -> typerenderer .)
    PYCODE          reduce using rule 6 (statement -> typerenderer .)
    $end            reduce using rule 6 (statement -> typerenderer .)



state 27

    (29) fullcall -> SYMBOL callparams . : callsorblock
    (27) simplecall -> SYMBOL callparams .

    :               shift and go to state 37
    EOL             reduce using rule 27 (simplecall -> SYMBOL callparams .)
    STRING          reduce using rule 27 (simplecall -> SYMBOL callparams .)
    IMPLICIT        reduce using rule 27 (simplecall -> SYMBOL callparams .)
    [               reduce using rule 27 (simplecall -> SYMBOL callparams .)
    SYMBOL          reduce using rule 27 (simplecall -> SYMBOL callparams .)
    PYCODE          reduce using rule 27 (simplecall -> SYMBOL callparams .)



state 28

    (38) callparams -> ( . paramvalues )
    (40) paramvalues -> . paramvalues , paramvalue
    (41) paramvalues -> . paramvalue
    (42) paramvalue -> . SYMBOL = paramexpr
    (43) paramvalue -> . paramexpr
    (44) paramexpr -> . exprs
    (45) paramexpr -> . group
    (17) exprs -> . exprs expr
    (18) exprs -> . expr
    (46) group -> . ( paramvalues )
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    SYMBOL          shift and go to state 38
    (               shift and go to state 40
    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    pycode                         shift and go to state 6
    group                          shift and go to state 39
    string                         shift and go to state 9
    expr                           shift and go to state 24
    paramvalue                     shift and go to state 42
    exprs                          shift and go to state 43
    paramvalues                    shift and go to state 44
    cycle                          shift and go to state 21
    implicit                       shift and go to state 20
    paramexpr                      shift and go to state 41

state 29

    (39) callparams -> empty .

    EOL             reduce using rule 39 (callparams -> empty .)
    STRING          reduce using rule 39 (callparams -> empty .)
    IMPLICIT        reduce using rule 39 (callparams -> empty .)
    [               reduce using rule 39 (callparams -> empty .)
    SYMBOL          reduce using rule 39 (callparams -> empty .)
    PYCODE          reduce using rule 39 (callparams -> empty .)
    ]               reduce using rule 39 (callparams -> empty .)
    )               reduce using rule 39 (callparams -> empty .)
    ,               reduce using rule 39 (callparams -> empty .)
    :               reduce using rule 39 (callparams -> empty .)



state 30

    (10) definition -> DEF SYMBOL . paramdefs : callsorblock
    (32) paramdefs -> . ( paramnames )
    (33) paramdefs -> . ( )

    (               shift and go to state 45


    paramdefs                      shift and go to state 46

state 31

    (9) import -> IMPORT STRING . EOL

    EOL             shift and go to state 47



state 32

    (11) typerenderer -> @ SYMBOL . paramdefs : callsorblock
    (32) paramdefs -> . ( paramnames )
    (33) paramdefs -> . ( )

    (               shift and go to state 45


    paramdefs                      shift and go to state 48

state 33

    (27) simplecall -> SYMBOL . callparams
    (38) callparams -> . ( paramvalues )
    (39) callparams -> . empty
    (47) empty -> .

    (               shift and go to state 28
    ]               reduce using rule 47 (empty -> .)
    STRING          reduce using rule 47 (empty -> .)
    IMPLICIT        reduce using rule 47 (empty -> .)
    [               reduce using rule 47 (empty -> .)
    SYMBOL          reduce using rule 47 (empty -> .)
    PYCODE          reduce using rule 47 (empty -> .)
    EOL             reduce using rule 47 (empty -> .)
    )               reduce using rule 47 (empty -> .)
    ,               reduce using rule 47 (empty -> .)


    callparams                     shift and go to state 49
    empty                          shift and go to state 29

state 34

    (26) cycle -> [ exprs . ] callparams
    (17) exprs -> exprs . expr
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    ]               shift and go to state 50
    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    SYMBOL          shift and go to state 33
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    string                         shift and go to state 9
    expr                           shift and go to state 35
    pycode                         shift and go to state 6
    implicit                       shift and go to state 20
    cycle                          shift and go to state 21

state 35

    (17) exprs -> exprs expr .

    STRING          reduce using rule 17 (exprs -> exprs expr .)
    IMPLICIT        reduce using rule 17 (exprs -> exprs expr .)
    [               reduce using rule 17 (exprs -> exprs expr .)
    SYMBOL          reduce using rule 17 (exprs -> exprs expr .)
    PYCODE          reduce using rule 17 (exprs -> exprs expr .)
    )               reduce using rule 17 (exprs -> exprs expr .)
    ,               reduce using rule 17 (exprs -> exprs expr .)
    EOL             reduce using rule 17 (exprs -> exprs expr .)
    ]               reduce using rule 17 (exprs -> exprs expr .)



state 36

    (16) call -> exprs EOL .

    DEF             reduce using rule 16 (call -> exprs EOL .)
    @               reduce using rule 16 (call -> exprs EOL .)
    IMPORT          reduce using rule 16 (call -> exprs EOL .)
    EOL             reduce using rule 16 (call -> exprs EOL .)
    SYMBOL          reduce using rule 16 (call -> exprs EOL .)
    STRING          reduce using rule 16 (call -> exprs EOL .)
    IMPLICIT        reduce using rule 16 (call -> exprs EOL .)
    [               reduce using rule 16 (call -> exprs EOL .)
    PYCODE          reduce using rule 16 (call -> exprs EOL .)
    $end            reduce using rule 16 (call -> exprs EOL .)
    DEDENT          reduce using rule 16 (call -> exprs EOL .)



state 37

    (29) fullcall -> SYMBOL callparams : . callsorblock
    (30) callsorblock -> . EOL block
    (31) callsorblock -> . exprs EOL
    (17) exprs -> . exprs expr
    (18) exprs -> . expr
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    EOL             shift and go to state 51
    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    SYMBOL          shift and go to state 33
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    string                         shift and go to state 9
    expr                           shift and go to state 24
    pycode                         shift and go to state 6
    exprs                          shift and go to state 52
    callsorblock                   shift and go to state 53
    implicit                       shift and go to state 20
    cycle                          shift and go to state 21

state 38

    (42) paramvalue -> SYMBOL . = paramexpr
    (27) simplecall -> SYMBOL . callparams
    (38) callparams -> . ( paramvalues )
    (39) callparams -> . empty
    (47) empty -> .

    =               shift and go to state 54
    (               shift and go to state 28
    STRING          reduce using rule 47 (empty -> .)
    IMPLICIT        reduce using rule 47 (empty -> .)
    [               reduce using rule 47 (empty -> .)
    SYMBOL          reduce using rule 47 (empty -> .)
    PYCODE          reduce using rule 47 (empty -> .)
    )               reduce using rule 47 (empty -> .)
    ,               reduce using rule 47 (empty -> .)


    callparams                     shift and go to state 49
    empty                          shift and go to state 29

state 39

    (45) paramexpr -> group .

    )               reduce using rule 45 (paramexpr -> group .)
    ,               reduce using rule 45 (paramexpr -> group .)



state 40

    (46) group -> ( . paramvalues )
    (40) paramvalues -> . paramvalues , paramvalue
    (41) paramvalues -> . paramvalue
    (42) paramvalue -> . SYMBOL = paramexpr
    (43) paramvalue -> . paramexpr
    (44) paramexpr -> . exprs
    (45) paramexpr -> . group
    (17) exprs -> . exprs expr
    (18) exprs -> . expr
    (46) group -> . ( paramvalues )
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    SYMBOL          shift and go to state 38
    (               shift and go to state 40
    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    pycode                         shift and go to state 6
    group                          shift and go to state 39
    string                         shift and go to state 9
    expr                           shift and go to state 24
    paramvalue                     shift and go to state 42
    exprs                          shift and go to state 43
    paramvalues                    shift and go to state 55
    cycle                          shift and go to state 21
    implicit                       shift and go to state 20
    paramexpr                      shift and go to state 41

state 41

    (43) paramvalue -> paramexpr .

    )               reduce using rule 43 (paramvalue -> paramexpr .)
    ,               reduce using rule 43 (paramvalue -> paramexpr .)



state 42

    (41) paramvalues -> paramvalue .

    )               reduce using rule 41 (paramvalues -> paramvalue .)
    ,               reduce using rule 41 (paramvalues -> paramvalue .)



state 43

    (44) paramexpr -> exprs .
    (17) exprs -> exprs . expr
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    )               reduce using rule 44 (paramexpr -> exprs .)
    ,               reduce using rule 44 (paramexpr -> exprs .)
    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    SYMBOL          shift and go to state 33
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    string                         shift and go to state 9
    expr                           shift and go to state 35
    pycode                         shift and go to state 6
    implicit                       shift and go to state 20
    cycle                          shift and go to state 21

state 44

    (38) callparams -> ( paramvalues . )
    (40) paramvalues -> paramvalues . , paramvalue

    )               shift and go to state 56
    ,               shift and go to state 57



state 45

    (32) paramdefs -> ( . paramnames )
    (33) paramdefs -> ( . )
    (34) paramnames -> . paramnames , paramname
    (35) paramnames -> . paramname
    (36) paramname -> . SYMBOL = STRING
    (37) paramname -> . SYMBOL

    )               shift and go to state 59
    SYMBOL          shift and go to state 60


    paramnames                     shift and go to state 58
    paramname                      shift and go to state 61

state 46

    (10) definition -> DEF SYMBOL paramdefs . : callsorblock

    :               shift and go to state 62



state 47

    (9) import -> IMPORT STRING EOL .

    DEF             reduce using rule 9 (import -> IMPORT STRING EOL .)
    @               reduce using rule 9 (import -> IMPORT STRING EOL .)
    IMPORT          reduce using rule 9 (import -> IMPORT STRING EOL .)
    EOL             reduce using rule 9 (import -> IMPORT STRING EOL .)
    SYMBOL          reduce using rule 9 (import -> IMPORT STRING EOL .)
    STRING          reduce using rule 9 (import -> IMPORT STRING EOL .)
    IMPLICIT        reduce using rule 9 (import -> IMPORT STRING EOL .)
    [               reduce using rule 9 (import -> IMPORT STRING EOL .)
    PYCODE          reduce using rule 9 (import -> IMPORT STRING EOL .)
    $end            reduce using rule 9 (import -> IMPORT STRING EOL .)



state 48

    (11) typerenderer -> @ SYMBOL paramdefs . : callsorblock

    :               shift and go to state 63



state 49

    (27) simplecall -> SYMBOL callparams .

    STRING          reduce using rule 27 (simplecall -> SYMBOL callparams .)
    IMPLICIT        reduce using rule 27 (simplecall -> SYMBOL callparams .)
    [               reduce using rule 27 (simplecall -> SYMBOL callparams .)
    SYMBOL          reduce using rule 27 (simplecall -> SYMBOL callparams .)
    PYCODE          reduce using rule 27 (simplecall -> SYMBOL callparams .)
    )               reduce using rule 27 (simplecall -> SYMBOL callparams .)
    ,               reduce using rule 27 (simplecall -> SYMBOL callparams .)
    EOL             reduce using rule 27 (simplecall -> SYMBOL callparams .)
    ]               reduce using rule 27 (simplecall -> SYMBOL callparams .)



state 50

    (26) cycle -> [ exprs ] . callparams
    (38) callparams -> . ( paramvalues )
    (39) callparams -> . empty
    (47) empty -> .

    (               shift and go to state 28
    EOL             reduce using rule 47 (empty -> .)
    STRING          reduce using rule 47 (empty -> .)
    IMPLICIT        reduce using rule 47 (empty -> .)
    [               reduce using rule 47 (empty -> .)
    SYMBOL          reduce using rule 47 (empty -> .)
    PYCODE          reduce using rule 47 (empty -> .)
    ]               reduce using rule 47 (empty -> .)
    )               reduce using rule 47 (empty -> .)
    ,               reduce using rule 47 (empty -> .)


    callparams                     shift and go to state 64
    empty                          shift and go to state 29

state 51

    (30) callsorblock -> EOL . block
    (12) block -> . INDENT calls DEDENT

    INDENT          shift and go to state 65


    block                          shift and go to state 66

state 52

    (31) callsorblock -> exprs . EOL
    (17) exprs -> exprs . expr
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    EOL             shift and go to state 67
    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    SYMBOL          shift and go to state 33
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    string                         shift and go to state 9
    expr                           shift and go to state 35
    pycode                         shift and go to state 6
    implicit                       shift and go to state 20
    cycle                          shift and go to state 21

state 53

    (29) fullcall -> SYMBOL callparams : callsorblock .

    DEDENT          reduce using rule 29 (fullcall -> SYMBOL callparams : callsorblock .)
    SYMBOL          reduce using rule 29 (fullcall -> SYMBOL callparams : callsorblock .)
    STRING          reduce using rule 29 (fullcall -> SYMBOL callparams : callsorblock .)
    IMPLICIT        reduce using rule 29 (fullcall -> SYMBOL callparams : callsorblock .)
    [               reduce using rule 29 (fullcall -> SYMBOL callparams : callsorblock .)
    PYCODE          reduce using rule 29 (fullcall -> SYMBOL callparams : callsorblock .)
    DEF             reduce using rule 29 (fullcall -> SYMBOL callparams : callsorblock .)
    @               reduce using rule 29 (fullcall -> SYMBOL callparams : callsorblock .)
    IMPORT          reduce using rule 29 (fullcall -> SYMBOL callparams : callsorblock .)
    EOL             reduce using rule 29 (fullcall -> SYMBOL callparams : callsorblock .)
    $end            reduce using rule 29 (fullcall -> SYMBOL callparams : callsorblock .)



state 54

    (42) paramvalue -> SYMBOL = . paramexpr
    (44) paramexpr -> . exprs
    (45) paramexpr -> . group
    (17) exprs -> . exprs expr
    (18) exprs -> . expr
    (46) group -> . ( paramvalues )
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    (               shift and go to state 40
    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    SYMBOL          shift and go to state 33
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    group                          shift and go to state 39
    string                         shift and go to state 9
    expr                           shift and go to state 24
    pycode                         shift and go to state 6
    exprs                          shift and go to state 43
    cycle                          shift and go to state 21
    implicit                       shift and go to state 20
    paramexpr                      shift and go to state 68

state 55

    (46) group -> ( paramvalues . )
    (40) paramvalues -> paramvalues . , paramvalue

    )               shift and go to state 69
    ,               shift and go to state 57



state 56

    (38) callparams -> ( paramvalues ) .

    EOL             reduce using rule 38 (callparams -> ( paramvalues ) .)
    STRING          reduce using rule 38 (callparams -> ( paramvalues ) .)
    IMPLICIT        reduce using rule 38 (callparams -> ( paramvalues ) .)
    [               reduce using rule 38 (callparams -> ( paramvalues ) .)
    SYMBOL          reduce using rule 38 (callparams -> ( paramvalues ) .)
    PYCODE          reduce using rule 38 (callparams -> ( paramvalues ) .)
    ]               reduce using rule 38 (callparams -> ( paramvalues ) .)
    )               reduce using rule 38 (callparams -> ( paramvalues ) .)
    ,               reduce using rule 38 (callparams -> ( paramvalues ) .)
    :               reduce using rule 38 (callparams -> ( paramvalues ) .)



state 57

    (40) paramvalues -> paramvalues , . paramvalue
    (42) paramvalue -> . SYMBOL = paramexpr
    (43) paramvalue -> . paramexpr
    (44) paramexpr -> . exprs
    (45) paramexpr -> . group
    (17) exprs -> . exprs expr
    (18) exprs -> . expr
    (46) group -> . ( paramvalues )
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    SYMBOL          shift and go to state 38
    (               shift and go to state 40
    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    pycode                         shift and go to state 6
    group                          shift and go to state 39
    string                         shift and go to state 9
    expr                           shift and go to state 24
    paramvalue                     shift and go to state 70
    exprs                          shift and go to state 43
    cycle                          shift and go to state 21
    implicit                       shift and go to state 20
    paramexpr                      shift and go to state 41

state 58

    (32) paramdefs -> ( paramnames . )
    (34) paramnames -> paramnames . , paramname

    )               shift and go to state 71
    ,               shift and go to state 72



state 59

    (33) paramdefs -> ( ) .

    :               reduce using rule 33 (paramdefs -> ( ) .)



state 60

    (36) paramname -> SYMBOL . = STRING
    (37) paramname -> SYMBOL .

    =               shift and go to state 73
    )               reduce using rule 37 (paramname -> SYMBOL .)
    ,               reduce using rule 37 (paramname -> SYMBOL .)



state 61

    (35) paramnames -> paramname .

    )               reduce using rule 35 (paramnames -> paramname .)
    ,               reduce using rule 35 (paramnames -> paramname .)



state 62

    (10) definition -> DEF SYMBOL paramdefs : . callsorblock
    (30) callsorblock -> . EOL block
    (31) callsorblock -> . exprs EOL
    (17) exprs -> . exprs expr
    (18) exprs -> . expr
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    EOL             shift and go to state 51
    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    SYMBOL          shift and go to state 33
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    string                         shift and go to state 9
    expr                           shift and go to state 24
    pycode                         shift and go to state 6
    exprs                          shift and go to state 52
    callsorblock                   shift and go to state 74
    implicit                       shift and go to state 20
    cycle                          shift and go to state 21

state 63

    (11) typerenderer -> @ SYMBOL paramdefs : . callsorblock
    (30) callsorblock -> . EOL block
    (31) callsorblock -> . exprs EOL
    (17) exprs -> . exprs expr
    (18) exprs -> . expr
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    EOL             shift and go to state 51
    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    SYMBOL          shift and go to state 33
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    string                         shift and go to state 9
    expr                           shift and go to state 24
    pycode                         shift and go to state 6
    exprs                          shift and go to state 52
    callsorblock                   shift and go to state 75
    implicit                       shift and go to state 20
    cycle                          shift and go to state 21

state 64

    (26) cycle -> [ exprs ] callparams .

    EOL             reduce using rule 26 (cycle -> [ exprs ] callparams .)
    STRING          reduce using rule 26 (cycle -> [ exprs ] callparams .)
    IMPLICIT        reduce using rule 26 (cycle -> [ exprs ] callparams .)
    [               reduce using rule 26 (cycle -> [ exprs ] callparams .)
    SYMBOL          reduce using rule 26 (cycle -> [ exprs ] callparams .)
    PYCODE          reduce using rule 26 (cycle -> [ exprs ] callparams .)
    ]               reduce using rule 26 (cycle -> [ exprs ] callparams .)
    )               reduce using rule 26 (cycle -> [ exprs ] callparams .)
    ,               reduce using rule 26 (cycle -> [ exprs ] callparams .)



state 65

    (12) block -> INDENT . calls DEDENT
    (13) calls -> . calls call
    (14) calls -> . empty
    (47) empty -> .

    DEDENT          reduce using rule 47 (empty -> .)
    SYMBOL          reduce using rule 47 (empty -> .)
    STRING          reduce using rule 47 (empty -> .)
    IMPLICIT        reduce using rule 47 (empty -> .)
    [               reduce using rule 47 (empty -> .)
    PYCODE          reduce using rule 47 (empty -> .)


    empty                          shift and go to state 76
    calls                          shift and go to state 77

state 66

    (30) callsorblock -> EOL block .

    DEF             reduce using rule 30 (callsorblock -> EOL block .)
    @               reduce using rule 30 (callsorblock -> EOL block .)
    IMPORT          reduce using rule 30 (callsorblock -> EOL block .)
    EOL             reduce using rule 30 (callsorblock -> EOL block .)
    SYMBOL          reduce using rule 30 (callsorblock -> EOL block .)
    STRING          reduce using rule 30 (callsorblock -> EOL block .)
    IMPLICIT        reduce using rule 30 (callsorblock -> EOL block .)
    [               reduce using rule 30 (callsorblock -> EOL block .)
    PYCODE          reduce using rule 30 (callsorblock -> EOL block .)
    $end            reduce using rule 30 (callsorblock -> EOL block .)
    DEDENT          reduce using rule 30 (callsorblock -> EOL block .)



state 67

    (31) callsorblock -> exprs EOL .

    DEF             reduce using rule 31 (callsorblock -> exprs EOL .)
    @               reduce using rule 31 (callsorblock -> exprs EOL .)
    IMPORT          reduce using rule 31 (callsorblock -> exprs EOL .)
    EOL             reduce using rule 31 (callsorblock -> exprs EOL .)
    SYMBOL          reduce using rule 31 (callsorblock -> exprs EOL .)
    STRING          reduce using rule 31 (callsorblock -> exprs EOL .)
    IMPLICIT        reduce using rule 31 (callsorblock -> exprs EOL .)
    [               reduce using rule 31 (callsorblock -> exprs EOL .)
    PYCODE          reduce using rule 31 (callsorblock -> exprs EOL .)
    $end            reduce using rule 31 (callsorblock -> exprs EOL .)
    DEDENT          reduce using rule 31 (callsorblock -> exprs EOL .)



state 68

    (42) paramvalue -> SYMBOL = paramexpr .

    )               reduce using rule 42 (paramvalue -> SYMBOL = paramexpr .)
    ,               reduce using rule 42 (paramvalue -> SYMBOL = paramexpr .)



state 69

    (46) group -> ( paramvalues ) .

    )               reduce using rule 46 (group -> ( paramvalues ) .)
    ,               reduce using rule 46 (group -> ( paramvalues ) .)



state 70

    (40) paramvalues -> paramvalues , paramvalue .

    )               reduce using rule 40 (paramvalues -> paramvalues , paramvalue .)
    ,               reduce using rule 40 (paramvalues -> paramvalues , paramvalue .)



state 71

    (32) paramdefs -> ( paramnames ) .

    :               reduce using rule 32 (paramdefs -> ( paramnames ) .)



state 72

    (34) paramnames -> paramnames , . paramname
    (36) paramname -> . SYMBOL = STRING
    (37) paramname -> . SYMBOL

    SYMBOL          shift and go to state 60


    paramname                      shift and go to state 78

state 73

    (36) paramname -> SYMBOL = . STRING

    STRING          shift and go to state 79



state 74

    (10) definition -> DEF SYMBOL paramdefs : callsorblock .

    DEF             reduce using rule 10 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    @               reduce using rule 10 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    IMPORT          reduce using rule 10 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    EOL             reduce using rule 10 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    SYMBOL          reduce using rule 10 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    STRING          reduce using rule 10 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    IMPLICIT        reduce using rule 10 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    [               reduce using rule 10 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    PYCODE          reduce using rule 10 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    $end            reduce using rule 10 (definition -> DEF SYMBOL paramdefs : callsorblock .)



state 75

    (11) typerenderer -> @ SYMBOL paramdefs : callsorblock .

    DEF             reduce using rule 11 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    @               reduce using rule 11 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    IMPORT          reduce using rule 11 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    EOL             reduce using rule 11 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    SYMBOL          reduce using rule 11 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    STRING          reduce using rule 11 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    IMPLICIT        reduce using rule 11 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    [               reduce using rule 11 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    PYCODE          reduce using rule 11 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    $end            reduce using rule 11 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)



state 76

    (14) calls -> empty .

    DEDENT          reduce using rule 14 (calls -> empty .)
    SYMBOL          reduce using rule 14 (calls -> empty .)
    STRING          reduce using rule 14 (calls -> empty .)
    IMPLICIT        reduce using rule 14 (calls -> empty .)
    [               reduce using rule 14 (calls -> empty .)
    PYCODE          reduce using rule 14 (calls -> empty .)



state 77

    (12) block -> INDENT calls . DEDENT
    (13) calls -> calls . call
    (15) call -> . fullcall
    (16) call -> . exprs EOL
    (29) fullcall -> . SYMBOL callparams : callsorblock
    (17) exprs -> . exprs expr
    (18) exprs -> . expr
    (19) expr -> . string
    (20) expr -> . implicit
    (21) expr -> . cycle
    (22) expr -> . simplecall
    (23) expr -> . pycode
    (24) string -> . STRING
    (25) implicit -> . IMPLICIT
    (26) cycle -> . [ exprs ] callparams
    (27) simplecall -> . SYMBOL callparams
    (28) pycode -> . PYCODE

    DEDENT          shift and go to state 80
    SYMBOL          shift and go to state 4
    STRING          shift and go to state 15
    IMPLICIT        shift and go to state 10
    [               shift and go to state 18
    PYCODE          shift and go to state 17


    simplecall                     shift and go to state 22
    string                         shift and go to state 9
    expr                           shift and go to state 24
    fullcall                       shift and go to state 16
    pycode                         shift and go to state 6
    exprs                          shift and go to state 25
    call                           shift and go to state 81
    implicit                       shift and go to state 20
    cycle                          shift and go to state 21

state 78

    (34) paramnames -> paramnames , paramname .

    )               reduce using rule 34 (paramnames -> paramnames , paramname .)
    ,               reduce using rule 34 (paramnames -> paramnames , paramname .)



state 79

    (36) paramname -> SYMBOL = STRING .

    )               reduce using rule 36 (paramname -> SYMBOL = STRING .)
    ,               reduce using rule 36 (paramname -> SYMBOL = STRING .)



state 80

    (12) block -> INDENT calls DEDENT .

    DEF             reduce using rule 12 (block -> INDENT calls DEDENT .)
    @               reduce using rule 12 (block -> INDENT calls DEDENT .)
    IMPORT          reduce using rule 12 (block -> INDENT calls DEDENT .)
    EOL             reduce using rule 12 (block -> INDENT calls DEDENT .)
    SYMBOL          reduce using rule 12 (block -> INDENT calls DEDENT .)
    STRING          reduce using rule 12 (block -> INDENT calls DEDENT .)
    IMPLICIT        reduce using rule 12 (block -> INDENT calls DEDENT .)
    [               reduce using rule 12 (block -> INDENT calls DEDENT .)
    PYCODE          reduce using rule 12 (block -> INDENT calls DEDENT .)
    $end            reduce using rule 12 (block -> INDENT calls DEDENT .)
    DEDENT          reduce using rule 12 (block -> INDENT calls DEDENT .)



state 81

    (13) calls -> calls call .

    DEDENT          reduce using rule 13 (calls -> calls call .)
    SYMBOL          reduce using rule 13 (calls -> calls call .)
    STRING          reduce using rule 13 (calls -> calls call .)
    IMPLICIT        reduce using rule 13 (calls -> calls call .)
    [               reduce using rule 13 (calls -> calls call .)
    PYCODE          reduce using rule 13 (calls -> calls call .)


