Created by PLY version 3.0 (http://www.dabeaz.com/ply)

Grammar

Rule 1     S' -> program
Rule 2     program -> statements
Rule 3     statements -> statements statement
Rule 4     statements -> empty
Rule 5     statement -> call
Rule 6     statement -> definition
Rule 7     statement -> typerenderer
Rule 8     statement -> import
Rule 9     import -> IMPORT STRING EOL
Rule 10    definition -> DEF SYMBOL paramdefs : callsorblock
Rule 11    typerenderer -> @ SYMBOL paramdefs : callsorblock
Rule 12    block -> INDENT calls DEDENT
Rule 13    calls -> calls call
Rule 14    calls -> empty
Rule 15    call -> fullcall
Rule 16    call -> exprs EOL
Rule 17    exprs -> exprs expr
Rule 18    exprs -> expr
Rule 19    expr -> string
Rule 20    expr -> implicit
Rule 21    expr -> cycle
Rule 22    expr -> simplecall
Rule 23    expr -> pycode
Rule 24    string -> STRING
Rule 25    implicit -> IMPLICIT
Rule 26    cycle -> [ exprs ] callparams
Rule 27    simplecall -> SYMBOL callparams
Rule 28    pycode -> PYCODE
Rule 29    fullcall -> SYMBOL callparams : callsorblock
Rule 30    callsorblock -> EOL block
Rule 31    callsorblock -> exprs EOL
Rule 32    paramdefs -> ( paramnames )
Rule 33    paramdefs -> ( )
Rule 34    paramnames -> paramnames , paramname
Rule 35    paramnames -> paramname
Rule 36    paramname -> SYMBOL = STRING
Rule 37    paramname -> SYMBOL
Rule 38    callparams -> ( paramvalues )
Rule 39    callparams -> empty
Rule 40    paramvalues -> paramvalues , paramvalue
Rule 41    paramvalues -> paramvalue
Rule 42    paramvalue -> SYMBOL = paramexpr
Rule 43    paramvalue -> paramexpr
Rule 44    paramexpr -> exprs
Rule 45    paramexpr -> group
Rule 46    group -> ( paramvalues )
Rule 47    empty -> <empty>

Terminals, with rules where they appear

(                    : 31 32 37 45
)                    : 31 32 37 45
,                    : 33 39
:                    : 9 10 28
=                    : 35 41
@                    : 10
DEDENT               : 11
DEF                  : 9
EOL                  : 8 15 29 30
IMPLICIT             : 24
IMPORT               : 8
INDENT               : 11
PYCODE               : 27
STRING               : 8 23 35
SYMBOL               : 9 10 26 28 35 36 41
[                    : 25
]                    : 25
error                : 

Nonterminals, with rules where they appear

block                : 29
call                 : 4 12
callparams           : 25 26 28
calls                : 11 12
callsorblock         : 9 10 28
cycle                : 20
definition           : 5
empty                : 3 13 38
expr                 : 16 17
exprs                : 15 16 25 30 43
fullcall             : 14
group                : 44
implicit             : 19
import               : 7
paramdefs            : 9 10
paramexpr            : 41 42
paramname            : 33 34
paramnames           : 31 33
paramvalue           : 39 40
paramvalues          : 37 39 45
program              : 0
pycode               : 22
simplecall           : 21
statement            : 2
statements           : 1 2
string               : 18
typerenderer         : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . empty
    (46) empty -> .

    DEF             reduce using rule 46 (empty -> .)
    @               reduce using rule 46 (empty -> .)
    IMPORT          reduce using rule 46 (empty -> .)
    SYMBOL          reduce using rule 46 (empty -> .)
    STRING          reduce using rule 46 (empty -> .)
    IMPLICIT        reduce using rule 46 (empty -> .)
    [               reduce using rule 46 (empty -> .)
    PYCODE          reduce using rule 46 (empty -> .)
    $end            reduce using rule 46 (empty -> .)

    program                        shift and go to state 1
    statements                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . call
    (5) statement -> . definition
    (6) statement -> . typerenderer
    (7) statement -> . import
    (14) call -> . fullcall
    (15) call -> . exprs EOL
    (9) definition -> . DEF SYMBOL paramdefs : callsorblock
    (10) typerenderer -> . @ SYMBOL paramdefs : callsorblock
    (8) import -> . IMPORT STRING EOL
    (28) fullcall -> . SYMBOL callparams : callsorblock
    (16) exprs -> . exprs expr
    (17) exprs -> . expr
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    $end            reduce using rule 1 (program -> statements .)
    DEF             shift and go to state 7
    @               shift and go to state 13
    IMPORT          shift and go to state 12
    SYMBOL          shift and go to state 4
    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    definition                     shift and go to state 21
    string                         shift and go to state 8
    typerenderer                   shift and go to state 24
    fullcall                       shift and go to state 15
    expr                           shift and go to state 22
    pycode                         shift and go to state 5
    exprs                          shift and go to state 23
    call                           shift and go to state 10
    statement                      shift and go to state 11
    import                         shift and go to state 6
    implicit                       shift and go to state 18
    cycle                          shift and go to state 19

state 3

    (3) statements -> empty .

    DEF             reduce using rule 3 (statements -> empty .)
    @               reduce using rule 3 (statements -> empty .)
    IMPORT          reduce using rule 3 (statements -> empty .)
    SYMBOL          reduce using rule 3 (statements -> empty .)
    STRING          reduce using rule 3 (statements -> empty .)
    IMPLICIT        reduce using rule 3 (statements -> empty .)
    [               reduce using rule 3 (statements -> empty .)
    PYCODE          reduce using rule 3 (statements -> empty .)
    $end            reduce using rule 3 (statements -> empty .)


state 4

    (28) fullcall -> SYMBOL . callparams : callsorblock
    (26) simplecall -> SYMBOL . callparams
    (37) callparams -> . ( paramvalues )
    (38) callparams -> . empty
    (46) empty -> .

    (               shift and go to state 26
    :               reduce using rule 46 (empty -> .)
    EOL             reduce using rule 46 (empty -> .)
    STRING          reduce using rule 46 (empty -> .)
    IMPLICIT        reduce using rule 46 (empty -> .)
    [               reduce using rule 46 (empty -> .)
    SYMBOL          reduce using rule 46 (empty -> .)
    PYCODE          reduce using rule 46 (empty -> .)

    callparams                     shift and go to state 25
    empty                          shift and go to state 27

state 5

    (22) expr -> pycode .

    ]               reduce using rule 22 (expr -> pycode .)
    STRING          reduce using rule 22 (expr -> pycode .)
    IMPLICIT        reduce using rule 22 (expr -> pycode .)
    [               reduce using rule 22 (expr -> pycode .)
    SYMBOL          reduce using rule 22 (expr -> pycode .)
    PYCODE          reduce using rule 22 (expr -> pycode .)
    EOL             reduce using rule 22 (expr -> pycode .)
    )               reduce using rule 22 (expr -> pycode .)
    ,               reduce using rule 22 (expr -> pycode .)


state 6

    (7) statement -> import .

    DEF             reduce using rule 7 (statement -> import .)
    @               reduce using rule 7 (statement -> import .)
    IMPORT          reduce using rule 7 (statement -> import .)
    SYMBOL          reduce using rule 7 (statement -> import .)
    STRING          reduce using rule 7 (statement -> import .)
    IMPLICIT        reduce using rule 7 (statement -> import .)
    [               reduce using rule 7 (statement -> import .)
    PYCODE          reduce using rule 7 (statement -> import .)
    $end            reduce using rule 7 (statement -> import .)


state 7

    (9) definition -> DEF . SYMBOL paramdefs : callsorblock

    SYMBOL          shift and go to state 28


state 8

    (18) expr -> string .

    ]               reduce using rule 18 (expr -> string .)
    STRING          reduce using rule 18 (expr -> string .)
    IMPLICIT        reduce using rule 18 (expr -> string .)
    [               reduce using rule 18 (expr -> string .)
    SYMBOL          reduce using rule 18 (expr -> string .)
    PYCODE          reduce using rule 18 (expr -> string .)
    EOL             reduce using rule 18 (expr -> string .)
    )               reduce using rule 18 (expr -> string .)
    ,               reduce using rule 18 (expr -> string .)


state 9

    (24) implicit -> IMPLICIT .

    EOL             reduce using rule 24 (implicit -> IMPLICIT .)
    STRING          reduce using rule 24 (implicit -> IMPLICIT .)
    IMPLICIT        reduce using rule 24 (implicit -> IMPLICIT .)
    [               reduce using rule 24 (implicit -> IMPLICIT .)
    SYMBOL          reduce using rule 24 (implicit -> IMPLICIT .)
    PYCODE          reduce using rule 24 (implicit -> IMPLICIT .)
    )               reduce using rule 24 (implicit -> IMPLICIT .)
    ,               reduce using rule 24 (implicit -> IMPLICIT .)
    ]               reduce using rule 24 (implicit -> IMPLICIT .)


state 10

    (4) statement -> call .

    DEF             reduce using rule 4 (statement -> call .)
    @               reduce using rule 4 (statement -> call .)
    IMPORT          reduce using rule 4 (statement -> call .)
    SYMBOL          reduce using rule 4 (statement -> call .)
    STRING          reduce using rule 4 (statement -> call .)
    IMPLICIT        reduce using rule 4 (statement -> call .)
    [               reduce using rule 4 (statement -> call .)
    PYCODE          reduce using rule 4 (statement -> call .)
    $end            reduce using rule 4 (statement -> call .)


state 11

    (2) statements -> statements statement .

    DEF             reduce using rule 2 (statements -> statements statement .)
    @               reduce using rule 2 (statements -> statements statement .)
    IMPORT          reduce using rule 2 (statements -> statements statement .)
    SYMBOL          reduce using rule 2 (statements -> statements statement .)
    STRING          reduce using rule 2 (statements -> statements statement .)
    IMPLICIT        reduce using rule 2 (statements -> statements statement .)
    [               reduce using rule 2 (statements -> statements statement .)
    PYCODE          reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 12

    (8) import -> IMPORT . STRING EOL

    STRING          shift and go to state 29


state 13

    (10) typerenderer -> @ . SYMBOL paramdefs : callsorblock

    SYMBOL          shift and go to state 30


state 14

    (23) string -> STRING .

    EOL             reduce using rule 23 (string -> STRING .)
    STRING          reduce using rule 23 (string -> STRING .)
    IMPLICIT        reduce using rule 23 (string -> STRING .)
    [               reduce using rule 23 (string -> STRING .)
    SYMBOL          reduce using rule 23 (string -> STRING .)
    PYCODE          reduce using rule 23 (string -> STRING .)
    ]               reduce using rule 23 (string -> STRING .)
    )               reduce using rule 23 (string -> STRING .)
    ,               reduce using rule 23 (string -> STRING .)


state 15

    (14) call -> fullcall .

    DEF             reduce using rule 14 (call -> fullcall .)
    @               reduce using rule 14 (call -> fullcall .)
    IMPORT          reduce using rule 14 (call -> fullcall .)
    SYMBOL          reduce using rule 14 (call -> fullcall .)
    STRING          reduce using rule 14 (call -> fullcall .)
    IMPLICIT        reduce using rule 14 (call -> fullcall .)
    [               reduce using rule 14 (call -> fullcall .)
    PYCODE          reduce using rule 14 (call -> fullcall .)
    $end            reduce using rule 14 (call -> fullcall .)
    DEDENT          reduce using rule 14 (call -> fullcall .)


state 16

    (27) pycode -> PYCODE .

    STRING          reduce using rule 27 (pycode -> PYCODE .)
    IMPLICIT        reduce using rule 27 (pycode -> PYCODE .)
    [               reduce using rule 27 (pycode -> PYCODE .)
    SYMBOL          reduce using rule 27 (pycode -> PYCODE .)
    PYCODE          reduce using rule 27 (pycode -> PYCODE .)
    )               reduce using rule 27 (pycode -> PYCODE .)
    ,               reduce using rule 27 (pycode -> PYCODE .)
    ]               reduce using rule 27 (pycode -> PYCODE .)
    EOL             reduce using rule 27 (pycode -> PYCODE .)


state 17

    (25) cycle -> [ . exprs ] callparams
    (16) exprs -> . exprs expr
    (17) exprs -> . expr
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    SYMBOL          shift and go to state 31
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    string                         shift and go to state 8
    expr                           shift and go to state 22
    pycode                         shift and go to state 5
    exprs                          shift and go to state 32
    implicit                       shift and go to state 18
    cycle                          shift and go to state 19

state 18

    (19) expr -> implicit .

    ]               reduce using rule 19 (expr -> implicit .)
    STRING          reduce using rule 19 (expr -> implicit .)
    IMPLICIT        reduce using rule 19 (expr -> implicit .)
    [               reduce using rule 19 (expr -> implicit .)
    SYMBOL          reduce using rule 19 (expr -> implicit .)
    PYCODE          reduce using rule 19 (expr -> implicit .)
    EOL             reduce using rule 19 (expr -> implicit .)
    )               reduce using rule 19 (expr -> implicit .)
    ,               reduce using rule 19 (expr -> implicit .)


state 19

    (20) expr -> cycle .

    ]               reduce using rule 20 (expr -> cycle .)
    STRING          reduce using rule 20 (expr -> cycle .)
    IMPLICIT        reduce using rule 20 (expr -> cycle .)
    [               reduce using rule 20 (expr -> cycle .)
    SYMBOL          reduce using rule 20 (expr -> cycle .)
    PYCODE          reduce using rule 20 (expr -> cycle .)
    EOL             reduce using rule 20 (expr -> cycle .)
    )               reduce using rule 20 (expr -> cycle .)
    ,               reduce using rule 20 (expr -> cycle .)


state 20

    (21) expr -> simplecall .

    ]               reduce using rule 21 (expr -> simplecall .)
    STRING          reduce using rule 21 (expr -> simplecall .)
    IMPLICIT        reduce using rule 21 (expr -> simplecall .)
    [               reduce using rule 21 (expr -> simplecall .)
    SYMBOL          reduce using rule 21 (expr -> simplecall .)
    PYCODE          reduce using rule 21 (expr -> simplecall .)
    EOL             reduce using rule 21 (expr -> simplecall .)
    )               reduce using rule 21 (expr -> simplecall .)
    ,               reduce using rule 21 (expr -> simplecall .)


state 21

    (5) statement -> definition .

    DEF             reduce using rule 5 (statement -> definition .)
    @               reduce using rule 5 (statement -> definition .)
    IMPORT          reduce using rule 5 (statement -> definition .)
    SYMBOL          reduce using rule 5 (statement -> definition .)
    STRING          reduce using rule 5 (statement -> definition .)
    IMPLICIT        reduce using rule 5 (statement -> definition .)
    [               reduce using rule 5 (statement -> definition .)
    PYCODE          reduce using rule 5 (statement -> definition .)
    $end            reduce using rule 5 (statement -> definition .)


state 22

    (17) exprs -> expr .

    EOL             reduce using rule 17 (exprs -> expr .)
    STRING          reduce using rule 17 (exprs -> expr .)
    IMPLICIT        reduce using rule 17 (exprs -> expr .)
    [               reduce using rule 17 (exprs -> expr .)
    SYMBOL          reduce using rule 17 (exprs -> expr .)
    PYCODE          reduce using rule 17 (exprs -> expr .)
    )               reduce using rule 17 (exprs -> expr .)
    ,               reduce using rule 17 (exprs -> expr .)
    ]               reduce using rule 17 (exprs -> expr .)


state 23

    (15) call -> exprs . EOL
    (16) exprs -> exprs . expr
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    EOL             shift and go to state 34
    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    SYMBOL          shift and go to state 31
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    string                         shift and go to state 8
    expr                           shift and go to state 33
    pycode                         shift and go to state 5
    implicit                       shift and go to state 18
    cycle                          shift and go to state 19

state 24

    (6) statement -> typerenderer .

    DEF             reduce using rule 6 (statement -> typerenderer .)
    @               reduce using rule 6 (statement -> typerenderer .)
    IMPORT          reduce using rule 6 (statement -> typerenderer .)
    SYMBOL          reduce using rule 6 (statement -> typerenderer .)
    STRING          reduce using rule 6 (statement -> typerenderer .)
    IMPLICIT        reduce using rule 6 (statement -> typerenderer .)
    [               reduce using rule 6 (statement -> typerenderer .)
    PYCODE          reduce using rule 6 (statement -> typerenderer .)
    $end            reduce using rule 6 (statement -> typerenderer .)


state 25

    (28) fullcall -> SYMBOL callparams . : callsorblock
    (26) simplecall -> SYMBOL callparams .

    :               shift and go to state 35
    EOL             reduce using rule 26 (simplecall -> SYMBOL callparams .)
    STRING          reduce using rule 26 (simplecall -> SYMBOL callparams .)
    IMPLICIT        reduce using rule 26 (simplecall -> SYMBOL callparams .)
    [               reduce using rule 26 (simplecall -> SYMBOL callparams .)
    SYMBOL          reduce using rule 26 (simplecall -> SYMBOL callparams .)
    PYCODE          reduce using rule 26 (simplecall -> SYMBOL callparams .)


state 26

    (37) callparams -> ( . paramvalues )
    (39) paramvalues -> . paramvalues , paramvalue
    (40) paramvalues -> . paramvalue
    (41) paramvalue -> . SYMBOL = paramexpr
    (42) paramvalue -> . paramexpr
    (43) paramexpr -> . exprs
    (44) paramexpr -> . group
    (16) exprs -> . exprs expr
    (17) exprs -> . expr
    (45) group -> . ( paramvalues )
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    SYMBOL          shift and go to state 36
    (               shift and go to state 38
    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    pycode                         shift and go to state 5
    group                          shift and go to state 37
    string                         shift and go to state 8
    expr                           shift and go to state 22
    paramvalue                     shift and go to state 40
    exprs                          shift and go to state 41
    paramvalues                    shift and go to state 42
    cycle                          shift and go to state 19
    implicit                       shift and go to state 18
    paramexpr                      shift and go to state 39

state 27

    (38) callparams -> empty .

    :               reduce using rule 38 (callparams -> empty .)
    EOL             reduce using rule 38 (callparams -> empty .)
    STRING          reduce using rule 38 (callparams -> empty .)
    IMPLICIT        reduce using rule 38 (callparams -> empty .)
    [               reduce using rule 38 (callparams -> empty .)
    SYMBOL          reduce using rule 38 (callparams -> empty .)
    PYCODE          reduce using rule 38 (callparams -> empty .)
    ]               reduce using rule 38 (callparams -> empty .)
    )               reduce using rule 38 (callparams -> empty .)
    ,               reduce using rule 38 (callparams -> empty .)


state 28

    (9) definition -> DEF SYMBOL . paramdefs : callsorblock
    (31) paramdefs -> . ( paramnames )
    (32) paramdefs -> . ( )

    (               shift and go to state 43

    paramdefs                      shift and go to state 44

state 29

    (8) import -> IMPORT STRING . EOL

    EOL             shift and go to state 45


state 30

    (10) typerenderer -> @ SYMBOL . paramdefs : callsorblock
    (31) paramdefs -> . ( paramnames )
    (32) paramdefs -> . ( )

    (               shift and go to state 43

    paramdefs                      shift and go to state 46

state 31

    (26) simplecall -> SYMBOL . callparams
    (37) callparams -> . ( paramvalues )
    (38) callparams -> . empty
    (46) empty -> .

    (               shift and go to state 26
    ]               reduce using rule 46 (empty -> .)
    STRING          reduce using rule 46 (empty -> .)
    IMPLICIT        reduce using rule 46 (empty -> .)
    [               reduce using rule 46 (empty -> .)
    SYMBOL          reduce using rule 46 (empty -> .)
    PYCODE          reduce using rule 46 (empty -> .)
    EOL             reduce using rule 46 (empty -> .)
    )               reduce using rule 46 (empty -> .)
    ,               reduce using rule 46 (empty -> .)

    callparams                     shift and go to state 47
    empty                          shift and go to state 27

state 32

    (25) cycle -> [ exprs . ] callparams
    (16) exprs -> exprs . expr
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    ]               shift and go to state 48
    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    SYMBOL          shift and go to state 31
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    string                         shift and go to state 8
    expr                           shift and go to state 33
    pycode                         shift and go to state 5
    implicit                       shift and go to state 18
    cycle                          shift and go to state 19

state 33

    (16) exprs -> exprs expr .

    EOL             reduce using rule 16 (exprs -> exprs expr .)
    STRING          reduce using rule 16 (exprs -> exprs expr .)
    IMPLICIT        reduce using rule 16 (exprs -> exprs expr .)
    [               reduce using rule 16 (exprs -> exprs expr .)
    SYMBOL          reduce using rule 16 (exprs -> exprs expr .)
    PYCODE          reduce using rule 16 (exprs -> exprs expr .)
    )               reduce using rule 16 (exprs -> exprs expr .)
    ,               reduce using rule 16 (exprs -> exprs expr .)
    ]               reduce using rule 16 (exprs -> exprs expr .)


state 34

    (15) call -> exprs EOL .

    DEF             reduce using rule 15 (call -> exprs EOL .)
    @               reduce using rule 15 (call -> exprs EOL .)
    IMPORT          reduce using rule 15 (call -> exprs EOL .)
    SYMBOL          reduce using rule 15 (call -> exprs EOL .)
    STRING          reduce using rule 15 (call -> exprs EOL .)
    IMPLICIT        reduce using rule 15 (call -> exprs EOL .)
    [               reduce using rule 15 (call -> exprs EOL .)
    PYCODE          reduce using rule 15 (call -> exprs EOL .)
    $end            reduce using rule 15 (call -> exprs EOL .)
    DEDENT          reduce using rule 15 (call -> exprs EOL .)


state 35

    (28) fullcall -> SYMBOL callparams : . callsorblock
    (29) callsorblock -> . EOL block
    (30) callsorblock -> . exprs EOL
    (16) exprs -> . exprs expr
    (17) exprs -> . expr
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    EOL             shift and go to state 49
    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    SYMBOL          shift and go to state 31
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    string                         shift and go to state 8
    expr                           shift and go to state 22
    pycode                         shift and go to state 5
    exprs                          shift and go to state 50
    callsorblock                   shift and go to state 51
    implicit                       shift and go to state 18
    cycle                          shift and go to state 19

state 36

    (41) paramvalue -> SYMBOL . = paramexpr
    (26) simplecall -> SYMBOL . callparams
    (37) callparams -> . ( paramvalues )
    (38) callparams -> . empty
    (46) empty -> .

    =               shift and go to state 52
    (               shift and go to state 26
    STRING          reduce using rule 46 (empty -> .)
    IMPLICIT        reduce using rule 46 (empty -> .)
    [               reduce using rule 46 (empty -> .)
    SYMBOL          reduce using rule 46 (empty -> .)
    PYCODE          reduce using rule 46 (empty -> .)
    )               reduce using rule 46 (empty -> .)
    ,               reduce using rule 46 (empty -> .)

    callparams                     shift and go to state 47
    empty                          shift and go to state 27

state 37

    (44) paramexpr -> group .

    )               reduce using rule 44 (paramexpr -> group .)
    ,               reduce using rule 44 (paramexpr -> group .)


state 38

    (45) group -> ( . paramvalues )
    (39) paramvalues -> . paramvalues , paramvalue
    (40) paramvalues -> . paramvalue
    (41) paramvalue -> . SYMBOL = paramexpr
    (42) paramvalue -> . paramexpr
    (43) paramexpr -> . exprs
    (44) paramexpr -> . group
    (16) exprs -> . exprs expr
    (17) exprs -> . expr
    (45) group -> . ( paramvalues )
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    SYMBOL          shift and go to state 36
    (               shift and go to state 38
    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    pycode                         shift and go to state 5
    group                          shift and go to state 37
    string                         shift and go to state 8
    expr                           shift and go to state 22
    paramvalue                     shift and go to state 40
    exprs                          shift and go to state 41
    paramvalues                    shift and go to state 53
    cycle                          shift and go to state 19
    implicit                       shift and go to state 18
    paramexpr                      shift and go to state 39

state 39

    (42) paramvalue -> paramexpr .

    )               reduce using rule 42 (paramvalue -> paramexpr .)
    ,               reduce using rule 42 (paramvalue -> paramexpr .)


state 40

    (40) paramvalues -> paramvalue .

    )               reduce using rule 40 (paramvalues -> paramvalue .)
    ,               reduce using rule 40 (paramvalues -> paramvalue .)


state 41

    (43) paramexpr -> exprs .
    (16) exprs -> exprs . expr
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    )               reduce using rule 43 (paramexpr -> exprs .)
    ,               reduce using rule 43 (paramexpr -> exprs .)
    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    SYMBOL          shift and go to state 31
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    string                         shift and go to state 8
    expr                           shift and go to state 33
    pycode                         shift and go to state 5
    implicit                       shift and go to state 18
    cycle                          shift and go to state 19

state 42

    (37) callparams -> ( paramvalues . )
    (39) paramvalues -> paramvalues . , paramvalue

    )               shift and go to state 54
    ,               shift and go to state 55


state 43

    (31) paramdefs -> ( . paramnames )
    (32) paramdefs -> ( . )
    (33) paramnames -> . paramnames , paramname
    (34) paramnames -> . paramname
    (35) paramname -> . SYMBOL = STRING
    (36) paramname -> . SYMBOL

    )               shift and go to state 57
    SYMBOL          shift and go to state 58

    paramnames                     shift and go to state 56
    paramname                      shift and go to state 59

state 44

    (9) definition -> DEF SYMBOL paramdefs . : callsorblock

    :               shift and go to state 60


state 45

    (8) import -> IMPORT STRING EOL .

    DEF             reduce using rule 8 (import -> IMPORT STRING EOL .)
    @               reduce using rule 8 (import -> IMPORT STRING EOL .)
    IMPORT          reduce using rule 8 (import -> IMPORT STRING EOL .)
    SYMBOL          reduce using rule 8 (import -> IMPORT STRING EOL .)
    STRING          reduce using rule 8 (import -> IMPORT STRING EOL .)
    IMPLICIT        reduce using rule 8 (import -> IMPORT STRING EOL .)
    [               reduce using rule 8 (import -> IMPORT STRING EOL .)
    PYCODE          reduce using rule 8 (import -> IMPORT STRING EOL .)
    $end            reduce using rule 8 (import -> IMPORT STRING EOL .)


state 46

    (10) typerenderer -> @ SYMBOL paramdefs . : callsorblock

    :               shift and go to state 61


state 47

    (26) simplecall -> SYMBOL callparams .

    ]               reduce using rule 26 (simplecall -> SYMBOL callparams .)
    STRING          reduce using rule 26 (simplecall -> SYMBOL callparams .)
    IMPLICIT        reduce using rule 26 (simplecall -> SYMBOL callparams .)
    [               reduce using rule 26 (simplecall -> SYMBOL callparams .)
    SYMBOL          reduce using rule 26 (simplecall -> SYMBOL callparams .)
    PYCODE          reduce using rule 26 (simplecall -> SYMBOL callparams .)
    EOL             reduce using rule 26 (simplecall -> SYMBOL callparams .)
    )               reduce using rule 26 (simplecall -> SYMBOL callparams .)
    ,               reduce using rule 26 (simplecall -> SYMBOL callparams .)


state 48

    (25) cycle -> [ exprs ] . callparams
    (37) callparams -> . ( paramvalues )
    (38) callparams -> . empty
    (46) empty -> .

    (               shift and go to state 26
    EOL             reduce using rule 46 (empty -> .)
    STRING          reduce using rule 46 (empty -> .)
    IMPLICIT        reduce using rule 46 (empty -> .)
    [               reduce using rule 46 (empty -> .)
    SYMBOL          reduce using rule 46 (empty -> .)
    PYCODE          reduce using rule 46 (empty -> .)
    ]               reduce using rule 46 (empty -> .)
    )               reduce using rule 46 (empty -> .)
    ,               reduce using rule 46 (empty -> .)

    callparams                     shift and go to state 62
    empty                          shift and go to state 27

state 49

    (29) callsorblock -> EOL . block
    (11) block -> . INDENT calls DEDENT

    INDENT          shift and go to state 63

    block                          shift and go to state 64

state 50

    (30) callsorblock -> exprs . EOL
    (16) exprs -> exprs . expr
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    EOL             shift and go to state 65
    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    SYMBOL          shift and go to state 31
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    string                         shift and go to state 8
    expr                           shift and go to state 33
    pycode                         shift and go to state 5
    implicit                       shift and go to state 18
    cycle                          shift and go to state 19

state 51

    (28) fullcall -> SYMBOL callparams : callsorblock .

    DEDENT          reduce using rule 28 (fullcall -> SYMBOL callparams : callsorblock .)
    SYMBOL          reduce using rule 28 (fullcall -> SYMBOL callparams : callsorblock .)
    STRING          reduce using rule 28 (fullcall -> SYMBOL callparams : callsorblock .)
    IMPLICIT        reduce using rule 28 (fullcall -> SYMBOL callparams : callsorblock .)
    [               reduce using rule 28 (fullcall -> SYMBOL callparams : callsorblock .)
    PYCODE          reduce using rule 28 (fullcall -> SYMBOL callparams : callsorblock .)
    DEF             reduce using rule 28 (fullcall -> SYMBOL callparams : callsorblock .)
    @               reduce using rule 28 (fullcall -> SYMBOL callparams : callsorblock .)
    IMPORT          reduce using rule 28 (fullcall -> SYMBOL callparams : callsorblock .)
    $end            reduce using rule 28 (fullcall -> SYMBOL callparams : callsorblock .)


state 52

    (41) paramvalue -> SYMBOL = . paramexpr
    (43) paramexpr -> . exprs
    (44) paramexpr -> . group
    (16) exprs -> . exprs expr
    (17) exprs -> . expr
    (45) group -> . ( paramvalues )
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    (               shift and go to state 38
    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    SYMBOL          shift and go to state 31
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    group                          shift and go to state 37
    string                         shift and go to state 8
    expr                           shift and go to state 22
    pycode                         shift and go to state 5
    exprs                          shift and go to state 41
    cycle                          shift and go to state 19
    implicit                       shift and go to state 18
    paramexpr                      shift and go to state 66

state 53

    (45) group -> ( paramvalues . )
    (39) paramvalues -> paramvalues . , paramvalue

    )               shift and go to state 67
    ,               shift and go to state 55


state 54

    (37) callparams -> ( paramvalues ) .

    :               reduce using rule 37 (callparams -> ( paramvalues ) .)
    EOL             reduce using rule 37 (callparams -> ( paramvalues ) .)
    STRING          reduce using rule 37 (callparams -> ( paramvalues ) .)
    IMPLICIT        reduce using rule 37 (callparams -> ( paramvalues ) .)
    [               reduce using rule 37 (callparams -> ( paramvalues ) .)
    SYMBOL          reduce using rule 37 (callparams -> ( paramvalues ) .)
    PYCODE          reduce using rule 37 (callparams -> ( paramvalues ) .)
    ]               reduce using rule 37 (callparams -> ( paramvalues ) .)
    )               reduce using rule 37 (callparams -> ( paramvalues ) .)
    ,               reduce using rule 37 (callparams -> ( paramvalues ) .)


state 55

    (39) paramvalues -> paramvalues , . paramvalue
    (41) paramvalue -> . SYMBOL = paramexpr
    (42) paramvalue -> . paramexpr
    (43) paramexpr -> . exprs
    (44) paramexpr -> . group
    (16) exprs -> . exprs expr
    (17) exprs -> . expr
    (45) group -> . ( paramvalues )
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    SYMBOL          shift and go to state 36
    (               shift and go to state 38
    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    pycode                         shift and go to state 5
    group                          shift and go to state 37
    string                         shift and go to state 8
    expr                           shift and go to state 22
    paramvalue                     shift and go to state 68
    exprs                          shift and go to state 41
    cycle                          shift and go to state 19
    implicit                       shift and go to state 18
    paramexpr                      shift and go to state 39

state 56

    (31) paramdefs -> ( paramnames . )
    (33) paramnames -> paramnames . , paramname

    )               shift and go to state 69
    ,               shift and go to state 70


state 57

    (32) paramdefs -> ( ) .

    :               reduce using rule 32 (paramdefs -> ( ) .)


state 58

    (35) paramname -> SYMBOL . = STRING
    (36) paramname -> SYMBOL .

    =               shift and go to state 71
    )               reduce using rule 36 (paramname -> SYMBOL .)
    ,               reduce using rule 36 (paramname -> SYMBOL .)


state 59

    (34) paramnames -> paramname .

    )               reduce using rule 34 (paramnames -> paramname .)
    ,               reduce using rule 34 (paramnames -> paramname .)


state 60

    (9) definition -> DEF SYMBOL paramdefs : . callsorblock
    (29) callsorblock -> . EOL block
    (30) callsorblock -> . exprs EOL
    (16) exprs -> . exprs expr
    (17) exprs -> . expr
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    EOL             shift and go to state 49
    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    SYMBOL          shift and go to state 31
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    string                         shift and go to state 8
    expr                           shift and go to state 22
    pycode                         shift and go to state 5
    exprs                          shift and go to state 50
    callsorblock                   shift and go to state 72
    implicit                       shift and go to state 18
    cycle                          shift and go to state 19

state 61

    (10) typerenderer -> @ SYMBOL paramdefs : . callsorblock
    (29) callsorblock -> . EOL block
    (30) callsorblock -> . exprs EOL
    (16) exprs -> . exprs expr
    (17) exprs -> . expr
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    EOL             shift and go to state 49
    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    SYMBOL          shift and go to state 31
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    string                         shift and go to state 8
    expr                           shift and go to state 22
    pycode                         shift and go to state 5
    exprs                          shift and go to state 50
    callsorblock                   shift and go to state 73
    implicit                       shift and go to state 18
    cycle                          shift and go to state 19

state 62

    (25) cycle -> [ exprs ] callparams .

    EOL             reduce using rule 25 (cycle -> [ exprs ] callparams .)
    STRING          reduce using rule 25 (cycle -> [ exprs ] callparams .)
    IMPLICIT        reduce using rule 25 (cycle -> [ exprs ] callparams .)
    [               reduce using rule 25 (cycle -> [ exprs ] callparams .)
    SYMBOL          reduce using rule 25 (cycle -> [ exprs ] callparams .)
    PYCODE          reduce using rule 25 (cycle -> [ exprs ] callparams .)
    )               reduce using rule 25 (cycle -> [ exprs ] callparams .)
    ,               reduce using rule 25 (cycle -> [ exprs ] callparams .)
    ]               reduce using rule 25 (cycle -> [ exprs ] callparams .)


state 63

    (11) block -> INDENT . calls DEDENT
    (12) calls -> . calls call
    (13) calls -> . empty
    (46) empty -> .

    DEDENT          reduce using rule 46 (empty -> .)
    SYMBOL          reduce using rule 46 (empty -> .)
    STRING          reduce using rule 46 (empty -> .)
    IMPLICIT        reduce using rule 46 (empty -> .)
    [               reduce using rule 46 (empty -> .)
    PYCODE          reduce using rule 46 (empty -> .)

    empty                          shift and go to state 74
    calls                          shift and go to state 75

state 64

    (29) callsorblock -> EOL block .

    DEF             reduce using rule 29 (callsorblock -> EOL block .)
    @               reduce using rule 29 (callsorblock -> EOL block .)
    IMPORT          reduce using rule 29 (callsorblock -> EOL block .)
    SYMBOL          reduce using rule 29 (callsorblock -> EOL block .)
    STRING          reduce using rule 29 (callsorblock -> EOL block .)
    IMPLICIT        reduce using rule 29 (callsorblock -> EOL block .)
    [               reduce using rule 29 (callsorblock -> EOL block .)
    PYCODE          reduce using rule 29 (callsorblock -> EOL block .)
    $end            reduce using rule 29 (callsorblock -> EOL block .)
    DEDENT          reduce using rule 29 (callsorblock -> EOL block .)


state 65

    (30) callsorblock -> exprs EOL .

    DEF             reduce using rule 30 (callsorblock -> exprs EOL .)
    @               reduce using rule 30 (callsorblock -> exprs EOL .)
    IMPORT          reduce using rule 30 (callsorblock -> exprs EOL .)
    SYMBOL          reduce using rule 30 (callsorblock -> exprs EOL .)
    STRING          reduce using rule 30 (callsorblock -> exprs EOL .)
    IMPLICIT        reduce using rule 30 (callsorblock -> exprs EOL .)
    [               reduce using rule 30 (callsorblock -> exprs EOL .)
    PYCODE          reduce using rule 30 (callsorblock -> exprs EOL .)
    $end            reduce using rule 30 (callsorblock -> exprs EOL .)
    DEDENT          reduce using rule 30 (callsorblock -> exprs EOL .)


state 66

    (41) paramvalue -> SYMBOL = paramexpr .

    )               reduce using rule 41 (paramvalue -> SYMBOL = paramexpr .)
    ,               reduce using rule 41 (paramvalue -> SYMBOL = paramexpr .)


state 67

    (45) group -> ( paramvalues ) .

    )               reduce using rule 45 (group -> ( paramvalues ) .)
    ,               reduce using rule 45 (group -> ( paramvalues ) .)


state 68

    (39) paramvalues -> paramvalues , paramvalue .

    )               reduce using rule 39 (paramvalues -> paramvalues , paramvalue .)
    ,               reduce using rule 39 (paramvalues -> paramvalues , paramvalue .)


state 69

    (31) paramdefs -> ( paramnames ) .

    :               reduce using rule 31 (paramdefs -> ( paramnames ) .)


state 70

    (33) paramnames -> paramnames , . paramname
    (35) paramname -> . SYMBOL = STRING
    (36) paramname -> . SYMBOL

    SYMBOL          shift and go to state 58

    paramname                      shift and go to state 76

state 71

    (35) paramname -> SYMBOL = . STRING

    STRING          shift and go to state 77


state 72

    (9) definition -> DEF SYMBOL paramdefs : callsorblock .

    DEF             reduce using rule 9 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    @               reduce using rule 9 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    IMPORT          reduce using rule 9 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    SYMBOL          reduce using rule 9 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    STRING          reduce using rule 9 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    IMPLICIT        reduce using rule 9 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    [               reduce using rule 9 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    PYCODE          reduce using rule 9 (definition -> DEF SYMBOL paramdefs : callsorblock .)
    $end            reduce using rule 9 (definition -> DEF SYMBOL paramdefs : callsorblock .)


state 73

    (10) typerenderer -> @ SYMBOL paramdefs : callsorblock .

    DEF             reduce using rule 10 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    @               reduce using rule 10 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    IMPORT          reduce using rule 10 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    SYMBOL          reduce using rule 10 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    STRING          reduce using rule 10 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    IMPLICIT        reduce using rule 10 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    [               reduce using rule 10 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    PYCODE          reduce using rule 10 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)
    $end            reduce using rule 10 (typerenderer -> @ SYMBOL paramdefs : callsorblock .)


state 74

    (13) calls -> empty .

    DEDENT          reduce using rule 13 (calls -> empty .)
    SYMBOL          reduce using rule 13 (calls -> empty .)
    STRING          reduce using rule 13 (calls -> empty .)
    IMPLICIT        reduce using rule 13 (calls -> empty .)
    [               reduce using rule 13 (calls -> empty .)
    PYCODE          reduce using rule 13 (calls -> empty .)


state 75

    (11) block -> INDENT calls . DEDENT
    (12) calls -> calls . call
    (14) call -> . fullcall
    (15) call -> . exprs EOL
    (28) fullcall -> . SYMBOL callparams : callsorblock
    (16) exprs -> . exprs expr
    (17) exprs -> . expr
    (18) expr -> . string
    (19) expr -> . implicit
    (20) expr -> . cycle
    (21) expr -> . simplecall
    (22) expr -> . pycode
    (23) string -> . STRING
    (24) implicit -> . IMPLICIT
    (25) cycle -> . [ exprs ] callparams
    (26) simplecall -> . SYMBOL callparams
    (27) pycode -> . PYCODE

    DEDENT          shift and go to state 78
    SYMBOL          shift and go to state 4
    STRING          shift and go to state 14
    IMPLICIT        shift and go to state 9
    [               shift and go to state 17
    PYCODE          shift and go to state 16

    simplecall                     shift and go to state 20
    string                         shift and go to state 8
    expr                           shift and go to state 22
    fullcall                       shift and go to state 15
    pycode                         shift and go to state 5
    exprs                          shift and go to state 23
    call                           shift and go to state 79
    implicit                       shift and go to state 18
    cycle                          shift and go to state 19

state 76

    (33) paramnames -> paramnames , paramname .

    )               reduce using rule 33 (paramnames -> paramnames , paramname .)
    ,               reduce using rule 33 (paramnames -> paramnames , paramname .)


state 77

    (35) paramname -> SYMBOL = STRING .

    )               reduce using rule 35 (paramname -> SYMBOL = STRING .)
    ,               reduce using rule 35 (paramname -> SYMBOL = STRING .)


state 78

    (11) block -> INDENT calls DEDENT .

    DEF             reduce using rule 11 (block -> INDENT calls DEDENT .)
    @               reduce using rule 11 (block -> INDENT calls DEDENT .)
    IMPORT          reduce using rule 11 (block -> INDENT calls DEDENT .)
    SYMBOL          reduce using rule 11 (block -> INDENT calls DEDENT .)
    STRING          reduce using rule 11 (block -> INDENT calls DEDENT .)
    IMPLICIT        reduce using rule 11 (block -> INDENT calls DEDENT .)
    [               reduce using rule 11 (block -> INDENT calls DEDENT .)
    PYCODE          reduce using rule 11 (block -> INDENT calls DEDENT .)
    $end            reduce using rule 11 (block -> INDENT calls DEDENT .)
    DEDENT          reduce using rule 11 (block -> INDENT calls DEDENT .)


state 79

    (12) calls -> calls call .

    DEDENT          reduce using rule 12 (calls -> calls call .)
    SYMBOL          reduce using rule 12 (calls -> calls call .)
    STRING          reduce using rule 12 (calls -> calls call .)
    IMPLICIT        reduce using rule 12 (calls -> calls call .)
    [               reduce using rule 12 (calls -> calls call .)
    PYCODE          reduce using rule 12 (calls -> calls call .)

